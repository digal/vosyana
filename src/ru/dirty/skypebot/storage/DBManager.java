/**
 * Created by IntelliJ IDEA.
 * User: Digal
 * Date: 04.04.2008
 * Time: 18:39:04
 * To change this template use File | Settings | File Templates.
 */
package ru.dirty.skypebot.storage;

import ru.dirty.skypebot.domain.*;
import ru.dirty.skypebot.logging.Logger;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.io.IOException;

import com.sun.syndication.io.FeedException;

public class DBManager{
    private static DBManager ourInstance = new DBManager();

    //TODO: move to config file
    private static String driverName = "org.apache.derby.jdbc.EmbeddedDriver";
    private static final String JDBC_URL = "jdbc:derby:data/database";


    private static String sqlAddUser = "INSERT INTO USERS (SKYPEID, ROLE) VALUES(?, ?)";
    private static String sqlUpdateUser = "UPDATE USERS SET ROLE = ? WHERE SKYPEID = ?";
    private static String sqlAddChat = "INSERT INTO CHATS (SKYPEID, IS_DEFAULT, ENABLE_RESPONSE, ENABLE_ONNN) VALUES(?, ?, ?, ?)";
    private static String sqlGetUserBySkypeId = "SELECT * FROM USERS WHERE SKYPEID LIKE ?";
    private static String sqlGetAdminUsers = "SELECT * FROM USERS WHERE ROLE = '"+IUser.ROLE_ADMIN+"' OR ROLE = '" + IUser.ROLE_MASTER + "'";
    private static String sqlGetAllUsers = "SELECT * FROM USERS";

    private static String sqlGetChatBySkypeId = "SELECT * FROM CHATS WHERE SKYPEID LIKE ?";
    private static String sqlGetAllChats = "SELECT * FROM CHATS";
    private static String sqlUpdateChat = "UPDATE CHATS SET ENABLE_RESPONSE = ?, ENABLE_ONNN = ?, IS_DEFAULT = ? WHERE SKYPEID = ?";

    private static String sqlAddONNN = "INSERT INTO ONNNS (VOTER, TARGET, CHAT, TS) VALUES(?,?,?, CURRENT TIMESTAMP)";
    private static String sqlGetONNN = "SELECT * FROM ONNNS WHERE VOTER LIKE ? AND TARGET LIKE ? AND CHAT LIKE ?";
    private static String sqlDeleteONNN = "DELETE FROM ONNNS WHERE VOTER LIKE ? AND TARGET LIKE ? AND CHAT LIKE ?";

    private static String sqlGetChatONNNs = "SELECT * FROM ONNNS WHERE CHAT LIKE ?";
    private static String sqlGetChatStats = "SELECT TARGET, COUNT(VOTER) AS VOTES FROM ONNNS WHERE CHAT LIKE ? GROUP BY TARGET ORDER BY VOTES DESC";
    private static String sqlGetTargets = "SELECT TARGET FROM ONNNS WHERE VOTER LIKE ? AND CHAT LIKE ?";
    private static String sqlGetVoted = "SELECT VOTER FROM ONNNS WHERE TARGET LIKE ? AND CHAT LIKE ?";
    private static String sqlGetTargetVotesCount = "SELECT COUNT(VOTER) AS VOTES FROM ONNNS WHERE TARGET LIKE ? AND CHAT LIKE ? GROUP BY TARGET";
    private static String sqlGetVoterVotesCount = "SELECT COUNT(TARGET) AS VOTES FROM ONNNS WHERE VOTER LIKE ? AND CHAT LIKE ? GROUP BY VOTER";

    private static String sqlInsertStatsEntry = "INSERT " +
            "INTO STATS (USR, CHAT, STARTED, UPDATED, MESSAGES, WORDS, SYMBOLS, COMMANDS, TOPICS) " +
            "VALUES (?, ?, CURRENT TIMESTAMP, CURRENT TIMESTAMP, ?, ?, ?, ?, ?)";
    private static String sqlUpdateStatsEntry = "UPDATE STATS " +
            "SET UPDATED = CURRENT TIMESTAMP, MESSAGES = ?, WORDS = ?, SYMBOLS = ?, COMMANDS = ?, TOPICS = ? " +
            "WHERE ID = ?";
    private static String sqlGetAllStats = "SELECT * FROM STATS";

    private static String sqlGetAllParticipants = "SELECT * FROM PARTICIPANTS";
    private static String sqlGetAllFeeds = "SELECT * FROM FEEDS";
    private static String sqlGetChatFeeds = "SELECT * FROM FEEDS WHERE CHAT = ?";
    private static String sqlInsertFeed = "INSERT INTO FEEDS (URL, CHAT, USR, FETCH_INTERVAL, SHOW_INTERVAL, LAST_FETCHED) " +
            "VALUES(?, ?, ?, ?, ?, ?)";


    public static DBManager getInstance() {
        return ourInstance;
    }

    private Connection conn;

    protected void finalize() throws Throwable {
        super.finalize();
        close();
    }

    public void close() {
        try {
            if (conn!=null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getInstance().log("DBManager close exception.");
        }
    }

    private HashMap<String,PreparedStatement> statements;

    private DBManager() {
        
    }

    private synchronized PreparedStatement getStatement(String sql) throws SQLException {
        PreparedStatement ps = statements.get(sql);
        if (ps==null) {
            int autoGeneratedKeys = PreparedStatement.NO_GENERATED_KEYS;
            if (sql.startsWith("INSERT")) {
                autoGeneratedKeys = PreparedStatement.RETURN_GENERATED_KEYS;
            }
            ps = conn.prepareStatement(sql, autoGeneratedKeys);
            statements.put(sql, ps);
        }
        return ps;
    }

    public void init() throws Exception {
        Driver drv = (Driver)Class.forName(driverName).newInstance();
        conn = drv.connect(JDBC_URL, null);

        statements = new HashMap<String,PreparedStatement>();

    }

    public IUser getUser(String skypeId) throws SQLException {
        PreparedStatement psGetUser = getStatement(sqlGetUserBySkypeId);
        psGetUser.setString(1, skypeId);
        ResultSet rs = psGetUser.executeQuery();
        if (rs.next()) {
            return createUser(rs);
        }
        return null;
    }

    public List<IUser> getUsers() throws SQLException {
    List<IUser> list = new ArrayList<IUser>();
        ResultSet rs = getStatement(sqlGetAllUsers).executeQuery();
        while (rs.next()) {
            list.add(createUser(rs));
        }
        return list;
    }

    public List<IUser> getAdmins() throws SQLException {
    List<IUser> list = new ArrayList<IUser>();
        ResultSet rs = getStatement(sqlGetAdminUsers).executeQuery();
        while (rs.next()) {
            list.add(createUser(rs));
        }
        return list;
    }


    public IUser addUser(String skypeid, String role) throws SQLException {
        Logger.getInstance().log("DBManager.addUser id = "+skypeid);
        PreparedStatement psAddUser = getStatement(sqlAddUser);
        psAddUser.setString(1, skypeid);
        if (role==null) {
            psAddUser.setString(2, "user");
        } else {
            psAddUser.setString(2, role);
        }
        psAddUser.executeUpdate();
        return getUser(skypeid);
    }

    public void updateUser(IUser user) throws SQLException {
        Logger.getInstance().log("DBManager.updateUser id = "+user.getSkypeId());
        PreparedStatement psUpdateUser = getStatement(sqlUpdateUser);

        psUpdateUser.setString(1, user.getRole());
        psUpdateUser.setString(2, user.getSkypeId());
        psUpdateUser.executeUpdate();
    }


    public IChat addChat(String skypeid, boolean enableONNN, boolean enableResponse) throws Exception {
        Logger.getInstance().log("DBManager.addChat id = "+skypeid);
        PreparedStatement psAddChat = getStatement(sqlAddChat);

        psAddChat.setString(1, skypeid);
        psAddChat.setBoolean(2, false);
        psAddChat.setBoolean(3, enableResponse);
        psAddChat.setBoolean(4, enableONNN);
        psAddChat.executeUpdate();
        return getChat(skypeid);
    }

    public IChat getChat(String skypeId) throws Exception {
        PreparedStatement psGetChat = getStatement(sqlGetChatBySkypeId);
        PreparedStatement psChatFeeds = getStatement(sqlGetChatFeeds);

        psGetChat.setString(1, skypeId);
        ResultSet rs = psGetChat.executeQuery();
        if (rs.next()) {
            psChatFeeds.setString(1, rs.getString("SKYPEID"));
            ResultSet rs2 = psChatFeeds.executeQuery();
            List<Feed> feeds = createFeeds(rs2);

            return createChat(rs, feeds);
        }
        return null;
    }

    public void updateChat(IChat chat) throws SQLException {
        Logger.getInstance().log("DBManager.updateChat id = "+chat.getSkypeId());
        PreparedStatement psUpdateChat = getStatement(sqlUpdateChat);

        psUpdateChat.setBoolean(1, chat.isResponseEnabled());
        psUpdateChat.setBoolean(2, chat.isONNNEnabled());
        psUpdateChat.setBoolean(3, chat.isDefault());
        psUpdateChat.setString(4, chat.getSkypeId());
        psUpdateChat.executeUpdate();
    }


    public List<IChat> getChats() throws Exception {
        List<IChat> list = new ArrayList<IChat>();
        ResultSet rs = getStatement(sqlGetAllChats).executeQuery();

        PreparedStatement psChatFeeds = getStatement(sqlGetChatFeeds);
        while (rs.next()) {
            psChatFeeds.setString(1, rs.getString("SKYPEID"));
            ResultSet rs2 = psChatFeeds.executeQuery();
            List<Feed> feeds = createFeeds(rs2);
            Chat ch = createChat(rs, feeds);
            list.add(ch);
        }
        return list;
    }

    private List<Feed> createFeeds(ResultSet rs2) throws Exception {
        ArrayList<Feed> feeds = new ArrayList<Feed>();
        while (rs2.next()) {
            feeds.add(createFeedEntry(rs2));
        }
        return feeds;
    }

    public IONNNEntry addONNNEntry(String voter, String target, String chat) throws SQLException {
        PreparedStatement psAddONNN = getStatement(sqlAddONNN);

        psAddONNN.setString(1, voter);
        psAddONNN.setString(2, target);
        psAddONNN.setString(3, chat);
        psAddONNN.executeUpdate();
        return getONNN(voter, target, chat);

    }

    public IONNNEntry getONNN(String voter, String target, String chat) throws SQLException {
        PreparedStatement psGetONNN = getStatement(sqlGetONNN);
        psGetONNN.setString(1, voter);
        psGetONNN.setString(2, target);
        psGetONNN.setString(3, chat);
        ResultSet rs = psGetONNN.executeQuery();
        if (rs.next()) {
            return createONNNEntry(rs);
        } else {
            return null;
        }
    }

    public boolean removeONNNEntry(String voter, String target, String chat) throws SQLException {
        PreparedStatement psDeleteONNN = getStatement(sqlDeleteONNN);
        psDeleteONNN.setString(1, voter);
        psDeleteONNN.setString(2, target);
        psDeleteONNN.setString(3, chat);
        int res = psDeleteONNN.executeUpdate();
        return res > 0;

    }

    public List<String> getTargets(String voter, String chatId) throws SQLException {
        ArrayList<String> list = new ArrayList<String>();
        PreparedStatement psGetTargets = getStatement(sqlGetTargets);
        psGetTargets.setString(1, voter);
        psGetTargets.setString(2, chatId);
        ResultSet rs = psGetTargets.executeQuery();
        while (rs.next()) {
            list.add(rs.getString("TARGET"));
        }
        return list;
    }
    
    public List<String> getVoters(String target, String chatId) throws SQLException {
        ArrayList<String> list = new ArrayList<String>();
        PreparedStatement psGetVoted = getStatement(sqlGetVoted);
        psGetVoted.setString(1, target);
        psGetVoted.setString(2, chatId);
        ResultSet rs = psGetVoted.executeQuery();
        while (rs.next()) {
            list.add(rs.getString("VOTER"));
        }
        return list;        
    }

    public List<IONNNStatElement> getONNNStats(String chatId) throws SQLException {
        ArrayList<IONNNStatElement> list = new ArrayList<IONNNStatElement>();
        PreparedStatement psGetChatStats = getStatement(sqlGetChatStats);
        psGetChatStats.setString(1, chatId);
        ResultSet rs = psGetChatStats.executeQuery();
        while (rs.next()) {
            list.add(createONNNStat(rs));
        }
        return list;
    }

    public List<Feed> getAllFeeds() throws SQLException, FeedException, IOException {
        ArrayList<Feed> list = new ArrayList<Feed>();
        ResultSet rs = getStatement(sqlGetAllFeeds).executeQuery();
        while (rs.next()) {
            list.add(createFeedEntry(rs));
        }
        return list;
    }


    public int getTargetVotesCount(String target, String chat) throws SQLException {
        PreparedStatement psGetTargetVotesCount = getStatement(sqlGetTargetVotesCount);
        psGetTargetVotesCount.setString(1, target);
        psGetTargetVotesCount.setString(2, chat);
        ResultSet rs = psGetTargetVotesCount.executeQuery();
        if (rs.next()) {
            return rs.getInt(1);
        } else {
            return 0;
        }
    }

    public int getVoterVotesCount(String voter, String chat) throws SQLException {
        PreparedStatement psGetVoterVotesCount = getStatement(sqlGetVoterVotesCount);
        psGetVoterVotesCount.setString(1, voter);
        psGetVoterVotesCount.setString(2, chat);
        ResultSet rs = psGetVoterVotesCount.executeQuery();
        if (rs.next()) {
            return rs.getInt(1);
        } else {
            return 0;
        }
    }


    private ONNNStatElement createONNNStat(ResultSet rs) throws SQLException  {
        ONNNStatElement el = new ONNNStatElement();
        el.setTarget(rs.getString("TARGET"));
        el.setVotes(rs.getInt("VOTES"));
        return el;
    }

    private User createUser(ResultSet rs) throws SQLException {
        User user = new User();
        user.setSkypeId(rs.getString("SKYPEID"));
        user.setRole(rs.getString("ROLE"));
        return user;
    }

    private Chat createChat(ResultSet rs, List<Feed> feeds) throws Exception {
        Chat chat = new Chat();
        chat.setSkypeId(rs.getString("SKYPEID"));
        chat.setDefault(rs.getBoolean("IS_DEFAULT"));
        chat.setONNNEnabled(rs.getBoolean("ENABLE_ONNN"));
        chat.setResponseEnabled(rs.getBoolean("ENABLE_RESPONSE"));
        if (feeds!=null) {
            for (Feed f : feeds) {
                chat.addFeed(f);
            }
        }
        return chat;
    }

    private ONNNEntry createONNNEntry(ResultSet rs) throws SQLException {
        ONNNEntry onnn = new ONNNEntry(rs.getString("VOTER"), rs.getString("TARGET"), rs.getString("CHAT"));
        onnn.setId(rs.getInt("ID"));
        onnn.setTimestamp(rs.getTimestamp("TS").getTime());
        return onnn;
    }

    public synchronized List<StatsEntry> getAllStats() throws SQLException {
        List<StatsEntry> list = new ArrayList<StatsEntry>();
        PreparedStatement psGetAllStats = getStatement(sqlGetAllStats);

        psGetAllStats.clearParameters();
        ResultSet rs = psGetAllStats.executeQuery();
        while (rs.next()) {
            StatsEntry se = createStatsEntry(rs);
            list.add(se);
        }
        return list;  //To change body of created methods use File | Settings | File Templates.
    }

    private StatsEntry createStatsEntry(ResultSet rs) throws SQLException {
        String usr = rs.getString("USR");
        String chat = rs.getString("CHAT");
        StatsEntry se = new StatsEntry(chat, usr);
        se.setId(rs.getInt("ID"));
        se.setMessages(rs.getLong("MESSAGES"));
        se.setWords(rs.getLong("WORDS"));
        se.setSymbols(rs.getLong("SYMBOLS"));
        se.setCommands(rs.getLong("COMMANDS"));
        se.setTopicChanges(rs.getLong("TOPICS"));
        se.setStarted(rs.getDate("STARTED"));
        return se;
    }



    private Feed createFeedEntry(ResultSet rs) throws SQLException, FeedException, IOException {
        int id = rs.getInt("ID");
        String usr = rs.getString("USR");
        String chat = rs.getString("CHAT");
        String url = rs.getString("URL");
        int fetchInterval = rs.getInt("FETCH_INTERVAL");
        int showInterval = rs.getInt("SHOW_INTERVAL");
        Timestamp lastShown = rs.getTimestamp("LAST_FETCHED");
        return new Feed(id, chat, usr, url, fetchInterval, showInterval, lastShown);
    }


    public synchronized void insertOrUpdateStats(StatsEntry se) throws SQLException {
        if (se.getId()==0) {
            insertStats(se);
        } else {
            updateStats(se);
        }
    }

    private void updateStats(StatsEntry se) throws SQLException {
        PreparedStatement psUpdateStatsEntry = getStatement(sqlUpdateStatsEntry);

        psUpdateStatsEntry.clearParameters();
        psUpdateStatsEntry.setLong(1, se.getMessages());
        psUpdateStatsEntry.setLong(2, se.getWords());
        psUpdateStatsEntry.setLong(3, se.getSymbols());
        psUpdateStatsEntry.setLong(4, se.getCommands());
        psUpdateStatsEntry.setLong(5, se.getTopicChanges());
        psUpdateStatsEntry.setInt(6, se.getId());
        psUpdateStatsEntry.executeUpdate();
        
    }

    private void insertStats(StatsEntry se) throws SQLException {
        PreparedStatement psInsertStatsEntry = getStatement(sqlInsertStatsEntry);
        psInsertStatsEntry.clearParameters();
        psInsertStatsEntry.setString(1, se.getUserID());
        psInsertStatsEntry.setString(2, se.getChatID());
        psInsertStatsEntry.setLong(3, se.getMessages());
        psInsertStatsEntry.setLong(4, se.getWords());
        psInsertStatsEntry.setLong(5, se.getSymbols());
        psInsertStatsEntry.setLong(6, se.getCommands());
        psInsertStatsEntry.setLong(7, se.getTopicChanges());
        psInsertStatsEntry.executeUpdate();
        ResultSet keys = psInsertStatsEntry.getGeneratedKeys();
        if (keys.next()) {
            int id =keys.getInt(1);
            se.setId(id);
            keys.close();
        }
    }

    public void insertFeedEntry(Feed f) throws SQLException {
        PreparedStatement psInsertFeed = getStatement(sqlInsertFeed);
        psInsertFeed.clearParameters();
        psInsertFeed.setString(1, f.getUrlString());
        psInsertFeed.setString(2, f.getChatId());
        psInsertFeed.setString(3, f.getUserId());
        psInsertFeed.setInt(4, f.getFetchInterval());
        psInsertFeed.setInt(5, f.getShowInterval());
        psInsertFeed.setTimestamp(6, f.getLastShownTs());
        psInsertFeed.executeUpdate();
        ResultSet keys = psInsertFeed.getGeneratedKeys();
        if (keys.next()) {
            int id =keys.getInt(1);
            f.setId(id);
            keys.close();
        }

    }

    public String update(String sql) {
        try {
            Statement st = conn.createStatement();
            int i = st.executeUpdate(sql);
            return i+" records updated";
        } catch (Throwable e) {
            return e.getClass().getName()+": "+e.getMessage();
        }

    }

}
